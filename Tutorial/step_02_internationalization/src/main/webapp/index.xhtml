<f:view xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:prime="http://primefaces.org/ui"
	xmlns:ac="http://beyondjava.net/angularFacesCore"
	>
	<h:head>
		<title>AngularFaces 2.0 tutorial step 02 - Foreign Language Support"</title>
	<script type="text/javascript" src="syntaxhighlighter/shCore.js"></script>
	<script type="text/javascript" src="syntaxhighlighter/shBrushJScript.js"></script>
	<script type="text/javascript" src="syntaxhighlighter/shBrushXml.js"></script>
	<script type="text/javascript" src="syntaxhighlighter/shBrushJava.js"></script>
	<script type="text/javascript" src="syntaxhighlighter/shBrushBat.js"></script>
	<link type="text/css" rel="stylesheet" href="syntaxhighlighter/shCoreDefault.css"/>
	<script type="text/javascript">SyntaxHighlighter.all();</script>
	</h:head>
	<h:body style="width:1000px">
					<h1>Automatic translation to foreign languages</h1>
					<p>AngularFaces 2.0 has been designed with foreign language support in mind. JSF always included support for internationalization,
					but it required a lot of boilerplate code.</p>
					<p>Let's return to the car dealer customer form:</p>
					<script type="syntaxhighlighter" class="brush: xml"><![CDATA[
			<prime:panel header="Contact information">
				<prime:panelGrid columns="3">
					<prime:inputText value="#{customer.lastName}" />
					<prime:inputText value="#{customer.firstName}" />
					<prime:inputText value="#{customer.dateOfBirth}" />
					<prime:inputText value="#{customer.emailAddress}" />
					<prime:selectBooleanCheckbox value="#{customer.IAgreeToTheTermsAndConditions}" />
				</prime:panelGrid>
				<prime:commandButton value="save" update="angular" action="#{customer.save}" />
			</prime:panel>
					]]></script>
					<p>This translate to a nice English version (well, usually there are a few glitches which can be ignored while your project is in its prototype phase):</p>
					<img src="carshop_english.png">
					<p>To expand to the international markets, you'll have to provide translations to the texts. AngularFaces makes it very easy to do so.</p>
					
					<h3>Preparing your project</h3>
					<p>First you have to add the list of supported languages to the faces-config.xml. That's just the same procedure as in traditional JSF programming:</p>
					<script type="syntaxhighlighter" class="brush: xml"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
	version="2.0">
	<application>
		<locale-config>
			<default-locale>en</default-locale>
			<supported-locale>de</supported-locale>
			<supported-locale>es</supported-locale>
		</locale-config>
	</application>
</faces-config>					]]></script>
					<p>The next step is to define the language files. It's also the last step :).</p>
					<p>The language files resemble the standard JSF language files. They are property files that have to be in the root folder
					of your classpath. AngularFaces uses a fixed name: it's always "i18n.properties". You can configure that differently (which is good,
					because you don't have to configure it in the first place).</p>
					<p>More precicely, AngularFaces looks for the property files in a similar manner as JSF does:</p>
					<p>
					<ul><li>First, it looks for a file specific to your language and country, such as "i18n_de_at.properties" for Austrian German.</li>
					<li>If there's no such file matching your browser's locale settings, it looks for a file specific to your default language, such as
					"i18n_de.properties" for German (no matter which region your are from).</li>
					<li>If there's still no such file, AngularFaces simply uses "i18n.properties". By default, this file is assumed to be the English version,
					although you are free to use a different language if you insist.</li>
					<li>If the "i18n.properties" file is also missing, AngularFaces displays the original text. So in most cases, there's no need to provide
					an "i18n.properties" file containing the English translation. However, you can use this file to fix the glitches caused by the
					automatic "de-camel-casing" algorithm which guesses labels from JSF bean attribute names.</li>
					</ul>
					<h3>The language files</h3>
					<p>The language files drop several of the constraints give by standard JSF. You can use arbitrary keys. The idea is to simply use the 
					original texts as keys. In a few cases you have to add extra attributes to get rid of ambiguous translations, but in most cases this
					approach works surprisingly good. The german translation file of our example looks like so:<p>
					<script type="syntaxhighlighter" class="brush: xml"><![CDATA[
car dealer - customer contact information=Kontaktinformation
Contact information=Ihre Anschrift
last name=Nachname
first name=Vorname
date of birth=Geburtsdatum
email address=E-Mail-Adresse
i agree to the terms and conditions="Ich habe die AGBs gelesen und akzeptiert."
save=Speichern]]></script>
					<p>You may or may not surround keys and translations with double quotes. Quotes are useful if the texts contain an "equals" sign.</p>
					<h3>How to modify your JSF file to benefit from the translation files</h3>
					Now, that's the nice part of AngularFaces: you don't have to do anything to make your JSF files multiligual. Adding the language files and
					configuring the faces-config.xml is all you have to do to make the contact form look like this:<p>
					<img src="carshop_german.png" />
					<img src="carshop_spanish.png" />
					
					<p>Which language is rendered depends on the locale setting of the users browsers. Putting it in a nutshell, every customer of yours' will see
					the JSF page in their language.</p>
					<br />
					<br />
					<br />
					<br />
		
    
  </h:body>
</f:view>

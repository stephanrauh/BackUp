	<tag>
		<description><![CDATA[CommandButton is an extended version of standard JSF commandButton with ajax and skinning features.]]></description>
		<tag-name>commandButton</tag-name>
		<component>
			<component-type>de.beyondjava.CommandButton</component-type>
			<renderer-type>de.beyondjava.CommandButton</renderer-type>
		</component>
		<!--  AngularFaces attributes -->
		<attribute>
			<description><![CDATA[String value to specify an AngularJS or an ordinary Javascript function allowing to suppress the server request conditionally.]]></description>
			<name>suppressServerRequest</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Angular function.]]></description>
			<name>ng-function</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<!--  AngularFaces attributes end -->
		
		<attribute>
			<description><![CDATA[Unique identifier of the component in a namingContainer.]]></description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Boolean value to specify the rendering of the component, when set to false component will not be rendered.]]></description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[An el expression referring to a server side UIComponent instance in a backing bean.]]></description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description><![CDATA[Label of the component.]]></description>
			<name>value</name>
			<required>false</required>
			<type>java.lang.Object</type>
		</attribute>
		<attribute>
			<description><![CDATA[An actionlistener to process when command is executed.]]></description>
			<name>actionListener</name>
			<required>false</required>
			<type>javax.faces.event.ActionListener</type>
		</attribute>
		<attribute>
			<description><![CDATA[A method expression or a string outcome to process when command is executed.]]></description>
			<name>action</name>
			<required>false</required>
			<type>javax.el.MethodExpression</type>
		</attribute>
		<attribute>
			<description><![CDATA[Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.]]></description>
			<name>immediate</name>
			<required>false</required>
			<type>boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[Name of the client side widget.]]></description>
			<name>widgetVar</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Specifies the submit mode, when set to true (default), submit would be made with Ajax.]]></description>
			<name>ajax</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[When set to true, ajax requests are not queued.]]></description>
			<name>async</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[Component(s) to process partially instead of whole view.]]></description>
			<name>process</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Component(s) to be updated with ajax.]]></description>
			<name>update</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute before ajax request is begins.]]></description>
			<name>onstart</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when ajax request is completed.]]></description>
			<name>oncomplete</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when ajax request fails.]]></description>
			<name>onerror</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when ajax request succeeds.]]></description>
			<name>onsuccess</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Defines whether to trigger ajaxStatus or not.]]></description>
			<name>global</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[When enabled, only values related to partially processed components would be serialized for ajax 
            instead of whole form.]]></description>
			<name>partialSubmit</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[Access key that when pressed transfers focus to the button.]]></description>
			<name>accesskey</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Alternate textual description of the button.]]></description>
			<name>alt</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Direction indication for text that does not inherit directionality. Valid values are LTR and RTL.]]></description>
			<name>dir</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Disables the button.]]></description>
			<name>disabled</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Style class representing the button icon.]]></description>
			<name>image</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[A localized user presentable name.]]></description>
			<name>label</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Code describing the language used in the generated markup for this component.]]></description>
			<name>lang</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Position of the button element in the tabbing order.]]></description>
			<name>tabindex</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Advisory tooltip informaton.]]></description>
			<name>title</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Sets the behavior of the button. Default is submit.]]></description>
			<name>type</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Flag indicating that this component will prevent changes by the user.]]></description>
			<name>readonly</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Inline style of the button element.]]></description>
			<name>style</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Style class of the button element.]]></description>
			<name>styleClass</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when button loses focus.]]></description>
			<name>onblur</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when button loses focus and its value has been modified since gaining focus.]]></description>
			<name>onchange</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when button is clicked.]]></description>
			<name>onclick</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when button is double clicked.]]></description>
			<name>ondblclick</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when button receives focus.]]></description>
			<name>onfocus</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a key is pressed down over button.]]></description>
			<name>onkeydown</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a key is pressed and released over button.]]></description>
			<name>onkeypress</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a key is released over button.]]></description>
			<name>onkeyup</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a pointer button is pressed down over button.]]></description>
			<name>onmousedown</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a pointer button is moved within button.]]></description>
			<name>onmousemove</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a pointer button is moved away from button.]]></description>
			<name>onmouseout</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a pointer button is moved onto button.]]></description>
			<name>onmouseover</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when a pointer button is released over button.]]></description>
			<name>onmouseup</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Client side callback to execute when text within button is selected by user.]]></description>
			<name>onselect</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Icon of the button.]]></description>
			<name>icon</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Position of the icon, default value is left.]]></description>
			<name>iconPos</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description><![CDATA[Displays button inline instead of fitting the content width, only used by mobile.]]></description>
			<name>inline</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description><![CDATA[Defines if label of the component is escaped or not.]]></description>
			<name>escape</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>
	